### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthType {
  token: String!
  user: User!
}

type Board {
  cards: [Card]
  columns: [BoardColumn]
  creator: User
  creatorId: Int!
  id: Int!
  name: String!
}

type BoardColumn {
  board: Board
  boardId: Int!
  cards: [Card]
  creator: User
  creatorId: Int!
  id: Int!
  name: String!
}

type Card {
  board: Board
  boardId: Int!
  column: BoardColumn
  columnId: Int!
  creator: User
  creatorId: Int!
  id: Int!
  text: String!
  votes: [Vote]!
}

type Mutation {
  addVoteToCard(boardId: Int!, cardId: Int!, userId: Int!): Vote!
  createBoard(name: String!): Board!
  createCard(boardId: Int!, columnId: Int!, text: String!): Card!
  createColumn(boardId: Int!, name: String!): BoardColumn!
  login(password: String!, username: String!): AuthType!
  register(email: String!, password: String!, username: String!): AuthType!
  subtractVoteFromCard(boardId: Int!, cardId: Int!, userId: Int!): Vote
}

type Query {
  getBoard(id: Int!): Board
  getBoards: [Board]!
  getBoardsByUserId: [Board]!
  getCard(id: Int!): Card
  getCardsByBoardId(boardId: Int!): [Card!]!
  getColumn(id: Int!): BoardColumn
  getColumnsByBoardId(boardId: Int!): [BoardColumn!]!
  getUser(id: Int!): User
  getUsers: [User]!
  getVotesByCardId(cardId: Int!): [Vote]!
  me: User
}

type User {
  boards: [Board]!
  cards: [Card]!
  email: String!
  id: Int!
  username: String!
}

type Vote {
  boardId: Int!
  cardId: Int!
  id: Int!
  user: User
  userId: Int!
}