### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthType {
  message: String
  success: Boolean
  token: String
  user: User
}

type Board {
  cards: [Card]
  columns: [BoardColumn]
  creator: User
  creatorId: Int!
  id: Int!
  name: String!
}

type BoardColumn {
  board: Board
  boardId: Int!
  cardIds: [Int]!
  cards: [Card]
  color: ThemeColorName
  creator: User
  creatorId: Int!
  id: Int!
  name: String!
  slot: Int!
}

type BoardPreset {
  columnIds: [Int]!
  columns: [ColumnPreset]!
  description: String!
  id: Int!
  name: String!
  type: String!
  votes: Int!
}

type Card {
  board: Board
  boardId: Int!
  column: BoardColumn
  columnId: Int!
  creator: User
  creatorId: Int!
  groupedCardIds: [Int]!
  id: Int!
  text: String!
  votes: [Vote]!
}

type CardDeleteResponse {
  message: String
  success: Boolean!
}

type ColumnPreset {
  board: BoardPreset!
  boardId: Int!
  color: String!
  id: Int!
  name: String!
}

input ColumnPresetTypeInput {
  color: String!
  name: String!
}

type GroupCardResponse {
  message: String
  success: Boolean!
}

type MoveCardResponse {
  message: String
  success: Boolean!
}

type Mutation {
  addVoteToCard(boardId: Int!, cardId: Int!, userId: Int!): Vote!
  createBoard(columns: [ColumnPresetTypeInput]!, name: String!): Board!
  createBoardColumn(boardId: Int!, name: String!, slot: Int!): BoardColumn!
  createBoardPreset(description: String!, name: String!): BoardPreset!
  createCard(boardId: Int!, columnId: Int!, text: String!): Card!
  createColumnPreset(color: String!, name: String!): ColumnPreset!
  deleteCard(id: Int!): CardDeleteResponse!
  groupCard(cardId: Int!, fromColumnId: Int!, groupedCardIds: [Int!]!, toColumnId: Int!): GroupCardResponse!
  login(password: String!, username: String!): AuthType!
  moveCard(cardId: Int!, fromColumnId: Int!, toColumnId: Int!): MoveCardResponse!
  register(email: String!, password: String!, username: String!): AuthType!
  subtractVoteFromCard(boardId: Int!, cardId: Int!, userId: Int!): Vote
  updateBoardColumnName(id: Int!, name: String!): BoardColumn!
  updateBoardName(id: Int!, name: String!): Board!
  updateCard(id: Int!, text: String!): Card!
}

type Query {
  getBoard(id: Int!): Board
  getBoardPresets: [BoardPreset]!
  getBoards: [Board]!
  getBoardsByUserId: [Board]!
  getCard(id: Int!): Card
  getCardsByBoardId(boardId: Int!): [Card!]!
  getColumn(id: Int!): BoardColumn
  getColumnPresets: [ColumnPreset]!
  getColumnsByBoardId(boardId: Int!): [BoardColumn!]!
  getUser(id: Int!): User
  getUsers: [User]!
  getVotesByCardId(cardId: Int!): [Vote]!
  me: AuthType
}

enum ThemeColorName {
  Blue
  Green
  Orange
  Purple
  Red
  Yellow
}

type User {
  boards: [Board]
  cards: [Card]
  email: String!
  id: Int!
  password: String
  username: String!
}

type Vote {
  boardId: Int!
  cardId: Int!
  id: Int!
  user: User
  userId: Int!
}